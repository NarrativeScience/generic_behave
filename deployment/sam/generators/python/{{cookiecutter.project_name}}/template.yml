{%- set component = cookiecutter.project_name | lower | replace("_", "") | replace("-", "") -%}
# See: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for the {{ cookiecutter.project_name }} project

Parameters:
  Environment:
    Description: Engineering environment
    Type: String
  Platform:
    Description: Platform (e.g. talos)
    Type: String
    Default: talos
  Function:
    Description: Function (e.g. saas, bugcrowd)
    Type: String
    Default: {% if cookiecutter.is_cf_custom_resource == "yes" %}cfcustomresource{% else %}lambda{% endif %}
  Component:
    Description: Component (e.g. {{ component }})
    Type: String
    Default: "{{ component }}"

Globals:
  # See: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  Function:
    CodeUri: __CODE_URI__  # DO NOT CHANGE; this is templated by `./build.sh`
    Handler: lambdex_handler.handler
    Runtime: python3.6
    Tags:
      Environment: !Ref Environment
      Platform: !Ref Platform
      Function: !Ref Function
      Component: !Ref Component

Mappings:
  EnvironmentMap:
    Prod:
      {%- if cookiecutter.requires_vpc == "yes" %}
      VPCID: vpc-885e8cef
      PublicSubnets:
        - subnet-d20a3def
        - subnet-ac80bbda
        - subnet-7cecb824
        - subnet-1ace8530
      PrivateSubnets:
        - subnet-df0a3de2
        - subnet-af80bbd9
        - subnet-7decb825
        - subnet-01ce852b
      SecuredSubnets:
        - subnet-dc0a3de1
        - subnet-a180bbd7
        - subnet-70ecb828
        - subnet-06ce852c
      {%- endif %}
      LambdaFunctionRoleArn: arn:aws:iam::231405699240:role/prod-lexio-serverless-runtime
    NonProd:
      {%- if cookiecutter.requires_vpc == "yes" %}
      VPCID: vpc-885e8cef
      PublicSubnets:
        - subnet-b4083f89
        - subnet-2485be52
        - subnet-faeebaa2
        - subnet-92cc87b8
      PrivateSubnets:
        - subnet-b7083f8a
        - subnet-2785be51
        - subnet-ffeebaa7
        - subnet-91cc87bb
      SecuredSubnets:
        - subnet-ba083f87
        - subnet-2085be56
        - subnet-f2eebaaa
        - subnet-9ccc87b6
      {%- endif %}
      LambdaFunctionRoleArn: arn:aws:iam::231405699240:role/nonprod-lexio-serverless-runtime

Conditions:
  Production: !Equals [!Ref Environment, prod]

Resources:
  # See: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub "Lexio Python function built with Pants (${Component})"
      FunctionName: !Sub "${Environment}-${Platform}-${Function}-${Component}"
      Timeout: 30
      MemorySize: 3008
      {%- if cookiecutter.requires_dlq == "yes" %}
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt LambdaFunctionDeadLetterQueue.Arn
      {%- endif %}
      Role:
        !If
          - Production
          - !FindInMap [EnvironmentMap, Prod, LambdaFunctionRoleArn]
          - !FindInMap [EnvironmentMap, NonProd, LambdaFunctionRoleArn]
      {%- if cookiecutter.requires_vpc == "yes" %}
      VpcConfig:
        SecurityGroupIds:
          - !If
              - Production
              - !ImportValue prod-talos-database-securitygroup
              - !ImportValue integ-talos-database-securitygroup
        SubnetIds:
          !If
            - Production
            - !FindInMap [EnvironmentMap, Prod, PrivateSubnets]
            - !FindInMap [EnvironmentMap, NonProd, PrivateSubnets]
      {%- endif %}
      {%- if cookiecutter.requires_postgres == "yes" %}
      Layers:
        - arn:aws:lambda:us-east-1:231405699240:layer:prod-talos-lambdalayer-postgres:5
      {%- endif %}
      Environment:
        Variables:
          Environment: !Ref Environment
          Platform: !Ref Platform
          Function: !Ref Function
          Component: !Ref Component

  {%- if cookiecutter.requires_dlq == "yes" %}
  # This queue holds event payloads that the LambdaFunction failed to process
  LambdaFunctionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-${Platform}-${Function}-${Component}-dlq"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Platform
          Value: !Ref Platform
        - Key: Function
          Value: !Ref Function
        - Key: Component
          Value: !Ref Component

  LambdaFunctionDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-${Platform}-${Function}-${Component}-dlq-alarm"
      AlarmDescription: |
        Alarm if the queue contains any messages after 15 minutes. This means that there
        are events that we failed to process even after retries.
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt LambdaFunctionDeadLetterQueue.QueueName
      Statistic: Sum
      Unit: Count
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      EvaluationPeriods: 3
      Period: 300
      TreatMissingData: missing
      ActionsEnabled: false
      # TODO(QPT-22479): add an environment condition
      # ActionsEnabled:
      #   !If
      #     - Production
      #     - true
      #     - false
      # TODO(QPT-22479): get this alarm as a parameter or pulled from another stack
      # AlarmActions:
      #   - !Ref AlarmNotificationTopic
      # OKActions:
      #   - !Ref AlarmNotificationTopic
  {%- endif %}

Outputs:
  LambdaFunction:
    Description: Lambda Function ARN
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-lambda-function-arn"
  {%- if cookiecutter.requires_dlq == "yes" %}
  LambdaFunctionDeadLetterQueue:
    Description: Lambda Function Dead Letter Queue ARN
    Value: !GetAtt LambdaFunctionDeadLetterQueue.Arn
  {%- endif %}
